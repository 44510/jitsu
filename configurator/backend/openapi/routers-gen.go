// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package openapi

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/v1/geo_data_resolvers)
	GetGeoDataResolvers(c *gin.Context)

	// (GET /api/v1/system/configuration)
	GetSystemConfiguration(c *gin.Context)

	// (GET /api/v1/system/version)
	GetSystemVersion(c *gin.Context)

	// (GET /api/v1/users/info)
	GetUsersInfo(c *gin.Context)

	// (POST /api/v1/users/info)
	SetUsersInfo(c *gin.Context)

	// (POST /api/v1/users/onboarded/signup)
	UsersOnboardedSignUp(c *gin.Context)

	// (POST /api/v1/users/password/change)
	UsersPasswordChange(c *gin.Context)

	// (POST /api/v1/users/password/reset)
	UsersPasswordReset(c *gin.Context)

	// (POST /api/v1/users/signin)
	UsersSignIn(c *gin.Context)

	// (POST /api/v1/users/signout)
	UsersSignOut(c *gin.Context)

	// (POST /api/v1/users/token/refresh)
	UsersTokenRefresh(c *gin.Context)

	// (GET /api/v2/objects/{projectId}/{objectType})
	GetObjectsByProjectIDAndObjectType(c *gin.Context, projectId ProjectId, objectType ObjectType)

	// (POST /api/v2/objects/{projectId}/{objectType})
	SetObjectsByProjectIDAndObjectType(c *gin.Context, projectId ProjectId, objectType ObjectType)

	// (DELETE /api/v2/objects/{projectId}/{objectType}/{objectUid})
	DeleteObjectsByProjectIDAndObjectTypeAndID(c *gin.Context, projectId ProjectId, objectType ObjectType, objectUid ObjectUid)

	// (GET /api/v2/objects/{projectId}/{objectType}/{objectUid})
	GetObjectsByProjectIDAndObjectTypeAndID(c *gin.Context, projectId ProjectId, objectType ObjectType, objectUid ObjectUid)

	// (PATCH /api/v2/objects/{projectId}/{objectType}/{objectUid})
	PatchObjectsByProjectIDAndObjectTypeAndID(c *gin.Context, projectId ProjectId, objectType ObjectType, objectUid ObjectUid)

	// (GET /api/v2/projects)
	GetProjects(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// GetGeoDataResolvers operation middleware
func (siw *ServerInterfaceWrapper) GetGeoDataResolvers(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{"server"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetGeoDataResolvers(c)
}

// GetSystemConfiguration operation middleware
func (siw *ServerInterfaceWrapper) GetSystemConfiguration(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetSystemConfiguration(c)
}

// GetSystemVersion operation middleware
func (siw *ServerInterfaceWrapper) GetSystemVersion(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetSystemVersion(c)
}

// GetUsersInfo operation middleware
func (siw *ServerInterfaceWrapper) GetUsersInfo(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{"client"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetUsersInfo(c)
}

// SetUsersInfo operation middleware
func (siw *ServerInterfaceWrapper) SetUsersInfo(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{"client"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.SetUsersInfo(c)
}

// UsersOnboardedSignUp operation middleware
func (siw *ServerInterfaceWrapper) UsersOnboardedSignUp(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.UsersOnboardedSignUp(c)
}

// UsersPasswordChange operation middleware
func (siw *ServerInterfaceWrapper) UsersPasswordChange(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.UsersPasswordChange(c)
}

// UsersPasswordReset operation middleware
func (siw *ServerInterfaceWrapper) UsersPasswordReset(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.UsersPasswordReset(c)
}

// UsersSignIn operation middleware
func (siw *ServerInterfaceWrapper) UsersSignIn(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.UsersSignIn(c)
}

// UsersSignout operation middleware
func (siw *ServerInterfaceWrapper) UsersSignout(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{"client"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.UsersSignOut(c)
}

// UsersTokenRefresh operation middleware
func (siw *ServerInterfaceWrapper) UsersTokenRefresh(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.UsersTokenRefresh(c)
}

// GetObjectsByProjectIDAndObjectType operation middleware
func (siw *ServerInterfaceWrapper) GetObjectsByProjectIDAndObjectType(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameter("simple", false, "projectId", c.Param("projectId"), &projectId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"message": fmt.Sprintf("Invalid format for parameter projectId: %s", err)})
		return
	}

	// ------------- Path parameter "objectType" -------------
	var objectType ObjectType

	err = runtime.BindStyledParameter("simple", false, "objectType", c.Param("objectType"), &objectType)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"message": fmt.Sprintf("Invalid format for parameter objectType: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{"client:project"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetObjectsByProjectIDAndObjectType(c, projectId, objectType)
}

// SetObjectsByProjectIDAndObjectType operation middleware
func (siw *ServerInterfaceWrapper) SetObjectsByProjectIDAndObjectType(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameter("simple", false, "projectId", c.Param("projectId"), &projectId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"message": fmt.Sprintf("Invalid format for parameter projectId: %s", err)})
		return
	}

	// ------------- Path parameter "objectType" -------------
	var objectType ObjectType

	err = runtime.BindStyledParameter("simple", false, "objectType", c.Param("objectType"), &objectType)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"message": fmt.Sprintf("Invalid format for parameter objectType: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{"client:project"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.SetObjectsByProjectIDAndObjectType(c, projectId, objectType)
}

// DeleteObjectsByProjectIDAndObjectTypeAndID operation middleware
func (siw *ServerInterfaceWrapper) DeleteObjectsByProjectIDAndObjectTypeAndID(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameter("simple", false, "projectId", c.Param("projectId"), &projectId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"message": fmt.Sprintf("Invalid format for parameter projectId: %s", err)})
		return
	}

	// ------------- Path parameter "objectType" -------------
	var objectType ObjectType

	err = runtime.BindStyledParameter("simple", false, "objectType", c.Param("objectType"), &objectType)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"message": fmt.Sprintf("Invalid format for parameter objectType: %s", err)})
		return
	}

	// ------------- Path parameter "objectUid" -------------
	var objectUid ObjectUid

	err = runtime.BindStyledParameter("simple", false, "objectUid", c.Param("objectUid"), &objectUid)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"message": fmt.Sprintf("Invalid format for parameter objectUid: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{"client:project"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteObjectsByProjectIDAndObjectTypeAndID(c, projectId, objectType, objectUid)
}

// GetObjectsByProjectIDAndObjectTypeAndID operation middleware
func (siw *ServerInterfaceWrapper) GetObjectsByProjectIDAndObjectTypeAndID(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameter("simple", false, "projectId", c.Param("projectId"), &projectId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"message": fmt.Sprintf("Invalid format for parameter projectId: %s", err)})
		return
	}

	// ------------- Path parameter "objectType" -------------
	var objectType ObjectType

	err = runtime.BindStyledParameter("simple", false, "objectType", c.Param("objectType"), &objectType)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"message": fmt.Sprintf("Invalid format for parameter objectType: %s", err)})
		return
	}

	// ------------- Path parameter "objectUid" -------------
	var objectUid ObjectUid

	err = runtime.BindStyledParameter("simple", false, "objectUid", c.Param("objectUid"), &objectUid)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"message": fmt.Sprintf("Invalid format for parameter objectUid: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{"client:project"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetObjectsByProjectIDAndObjectTypeAndID(c, projectId, objectType, objectUid)
}

// PatchObjectsByProjectIDAndObjectTypeAndID operation middleware
func (siw *ServerInterfaceWrapper) PatchObjectsByProjectIDAndObjectTypeAndID(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameter("simple", false, "projectId", c.Param("projectId"), &projectId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"message": fmt.Sprintf("Invalid format for parameter projectId: %s", err)})
		return
	}

	// ------------- Path parameter "objectType" -------------
	var objectType ObjectType

	err = runtime.BindStyledParameter("simple", false, "objectType", c.Param("objectType"), &objectType)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"message": fmt.Sprintf("Invalid format for parameter objectType: %s", err)})
		return
	}

	// ------------- Path parameter "objectUid" -------------
	var objectUid ObjectUid

	err = runtime.BindStyledParameter("simple", false, "objectUid", c.Param("objectUid"), &objectUid)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"message": fmt.Sprintf("Invalid format for parameter objectUid: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{"client:project"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PatchObjectsByProjectIDAndObjectTypeAndID(c, projectId, objectType, objectUid)
}

// GetProjects operation middleware
func (siw *ServerInterfaceWrapper) GetProjects(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{"client"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetProjects(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/api/v1/geo_data_resolvers", wrapper.GetGeoDataResolvers)

	router.GET(options.BaseURL+"/api/v1/system/configuration", wrapper.GetSystemConfiguration)

	router.GET(options.BaseURL+"/api/v1/system/version", wrapper.GetSystemVersion)

	router.GET(options.BaseURL+"/api/v1/users/info", wrapper.GetUsersInfo)

	router.POST(options.BaseURL+"/api/v1/users/info", wrapper.SetUsersInfo)

	router.POST(options.BaseURL+"/api/v1/users/onboarded/signup", wrapper.UsersOnboardedSignUp)

	router.POST(options.BaseURL+"/api/v1/users/password/change", wrapper.UsersPasswordChange)

	router.POST(options.BaseURL+"/api/v1/users/password/reset", wrapper.UsersPasswordReset)

	router.POST(options.BaseURL+"/api/v1/users/signin", wrapper.UsersSignIn)

	router.POST(options.BaseURL+"/api/v1/users/signout", wrapper.UsersSignout)

	router.POST(options.BaseURL+"/api/v1/users/token/refresh", wrapper.UsersTokenRefresh)

	router.GET(options.BaseURL+"/api/v2/objects/:projectId/:objectType", wrapper.GetObjectsByProjectIDAndObjectType)

	router.POST(options.BaseURL+"/api/v2/objects/:projectId/:objectType", wrapper.SetObjectsByProjectIDAndObjectType)

	router.DELETE(options.BaseURL+"/api/v2/objects/:projectId/:objectType/:objectUid", wrapper.DeleteObjectsByProjectIDAndObjectTypeAndID)

	router.GET(options.BaseURL+"/api/v2/objects/:projectId/:objectType/:objectUid", wrapper.GetObjectsByProjectIDAndObjectTypeAndID)

	router.PATCH(options.BaseURL+"/api/v2/objects/:projectId/:objectType/:objectUid", wrapper.PatchObjectsByProjectIDAndObjectTypeAndID)

	router.GET(options.BaseURL+"/api/v2/projects", wrapper.GetProjects)

	return router
}
